# https://github.com/bitnami/charts/blob/master/bitnami/mysql/values.yaml

auth:
  database: ludiiGames
  username: "mysql"
  password: "ludiluda"
  rootPassword: "ludiluda"

## Bitnami MySQL image
image:
  ## Official Bitnami image (no wget or unzip command)
  ## Requires to use an initContainer to download the database (see below)
  registry: docker.io
  repository: bitnami/mysql
  tag: 8.0.26-debian-10-r31

  ## Image with wget, unzip, gzip already installed
  # registry: ghcr.io
  # repository: maastrichtu-ids/mysql
  # tag: "latest"
  
  pullPolicy: IfNotPresent
  pullSecrets: []
  ## Set to true if you would like to see extra information on logs
  debug: false

## MySQL Primary pod parameters
primary:
  ## Script to initialize the database (in an init container)
  ## This cant be done in the main SQL container because it requires root to install wget
  initContainers: 
  - name: init-database
    image: debian
    imagePullPolicy: Always
    command: 
      - "/bin/sh"
      - "-c"
      - "apt-get update && apt-get install -y wget unzip"
      - "&& wget https://ludii.games/downloads/database.zip && unzip database.zip"
      - "&& mv database/* /docker-entrypoint-initdb.d/ && chown -R 1001:1001 /docker-entrypoint-initdb.d"
    volumeMounts:
      - name: initdb-vol
        mountPath: "/docker-entrypoint-initdb.d/"

  # extraVolumes: []
  extraVolumes:  
    - name: initdb-vol
      emptyDir: {}
  # extraVolumeMounts: []
  extraVolumeMounts: 
    - name: initdb-vol
      mountPath: "/docker-entrypoint-initdb.d/"

  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    # runAsUser: 0
    runAsUser: 1001

  ## MySQL primary container's resource requests and limits
  resources:
    ## Example:
    ## limits:
    ##    cpu: 250m
    ##    memory: 256Mi
    limits: {}
    ## Examples:
    ## requests:
    ##    cpu: 250m
    ##    memory: 256Mi
    requests: {}
  extraEnvVars: []

  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi

  sidecars: []
  service:
    type: ClusterIP
    port: 3306
    nodePort: ""
    clusterIP: ""
    loadBalancerIP: ""
    externalTrafficPolicy: Cluster
  pdb:
    enabled: false
    minAvailable: 1
    maxUnavailable: ""
  podLabels: {}
  configuration: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci

    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin

    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid

serviceAccount:
  create: false
  name: "anyuid"
  annotations: {}

rbac:
  create: true

networkPolicy:
  enabled: false
  allowExternal: true
  explicitNamespacesSelector: {}
volumePermissions:
  ## Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r172
    pullPolicy: Always

## Enable diagnostic mode in the deployment
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
## Enable metrics container
metrics:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/mysqld-exporter
    tag: 0.13.0-debian-10-r75
